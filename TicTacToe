import pygame
import sys
import random

pygame.init()

# ---------- CONSTANTS ----------
WIDTH, HEIGHT = 700, 500
LINE_WIDTH = 6
BOARD_ROWS, BOARD_COLS = 3, 3
SQUARE_SIZE = 120
BOARD_OFFSET_X = (WIDTH - BOARD_COLS * SQUARE_SIZE) // 2
BOARD_OFFSET_Y = (HEIGHT - BOARD_ROWS * SQUARE_SIZE) // 2
SPACE = 15

# Colors
BG_COLOR = (10, 30, 60)
LINE_COLOR = (0, 120, 255)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
X_COLOR = (200, 30, 30)
O_COLOR = (30, 200, 30)
WINNER_BG = (20, 20, 20)

# Screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Tic Tac Toe - Player vs Player / Player vs Computer")
screen.fill(BG_COLOR)


# Fonts
font = pygame.font.Font(None, 36)

# Board
board = [[None] * BOARD_COLS for _ in range(BOARD_ROWS)]
win_line = None

# ---------- FUNCTIONS ----------
def draw_board():
    screen.fill(BG_COLOR)
    for i in range(1, BOARD_ROWS):
        pygame.draw.line(screen, LINE_COLOR,                 #horaizontal
                         (BOARD_OFFSET_X, BOARD_OFFSET_Y + i * SQUARE_SIZE),
                         (BOARD_OFFSET_X + BOARD_COLS * SQUARE_SIZE, BOARD_OFFSET_Y + i * SQUARE_SIZE), LINE_WIDTH)
        pygame.draw.line(screen, LINE_COLOR,                 #vertical
                         (BOARD_OFFSET_X + i * SQUARE_SIZE, BOARD_OFFSET_Y),
                         (BOARD_OFFSET_X + i * SQUARE_SIZE, BOARD_OFFSET_Y + BOARD_ROWS * SQUARE_SIZE), LINE_WIDTH)

def draw_figures():
    for row in range(BOARD_ROWS):
        for col in range(BOARD_COLS):
            x_pos = BOARD_OFFSET_X + col * SQUARE_SIZE + SPACE // 2
            y_pos = BOARD_OFFSET_Y + row * SQUARE_SIZE + SPACE // 2
            if board[row][col] == "X":
                pygame.draw.line(screen, X_COLOR, (x_pos, y_pos),
                                 (x_pos + SQUARE_SIZE - SPACE, y_pos + SQUARE_SIZE - SPACE), 8)
                pygame.draw.line(screen, X_COLOR,
                                 (x_pos, y_pos + SQUARE_SIZE - SPACE),
                                 (x_pos + SQUARE_SIZE - SPACE, y_pos), 8)

            if board[row][col] == "O":
                pygame.draw.circle(screen, O_COLOR,
                                   (x_pos + (SQUARE_SIZE - SPACE) // 2, y_pos + (SQUARE_SIZE - SPACE) // 2),
                                   (SQUARE_SIZE - SPACE) // 2, 8)

def mark_square(row, col, player):
    board[row][col] = player

def available_square(row, col):
    return board[row][col] is None

def is_board_full():
    return all(all(cell is not None for cell in row) for row in board)

def check_win(player):
    global win_line
    for row in range(BOARD_ROWS):
        if all(board[row][col] == player for col in range(BOARD_COLS)):
            y = BOARD_OFFSET_Y + row * SQUARE_SIZE + SQUARE_SIZE // 2
            win_line = ((BOARD_OFFSET_X, y), (BOARD_OFFSET_X + BOARD_COLS * SQUARE_SIZE, y))
            return True
    for col in range(BOARD_COLS):
        if all(board[row][col] == player for row in range(BOARD_ROWS)):
            x = BOARD_OFFSET_X + col * SQUARE_SIZE + SQUARE_SIZE // 2
            win_line = ((x, BOARD_OFFSET_Y), (x, BOARD_OFFSET_Y + BOARD_ROWS * SQUARE_SIZE))
            return True
    if all(board[i][i] == player for i in range(BOARD_ROWS)):
        win_line = ((BOARD_OFFSET_X, BOARD_OFFSET_Y),
                    (BOARD_OFFSET_X + BOARD_COLS * SQUARE_SIZE, BOARD_OFFSET_Y + BOARD_ROWS * SQUARE_SIZE))
        return True
    if all(board[i][BOARD_COLS - i - 1] == player for i in range(BOARD_ROWS)):
        win_line = ((BOARD_OFFSET_X + BOARD_COLS * SQUARE_SIZE, BOARD_OFFSET_Y),
                    (BOARD_OFFSET_X, BOARD_OFFSET_Y + BOARD_ROWS * SQUARE_SIZE))
        return True
    return False

def computer_move():
    for row in range(BOARD_ROWS):
        for col in range(BOARD_COLS):
            if available_square(row, col):
                board[row][col] = "O"
                if check_win("O"):
                    return
                board[row][col] = None
    for row in range(BOARD_ROWS):
        for col in range(BOARD_COLS):
            if available_square(row, col):
                board[row][col] = "X"
                if check_win("X"):
                    board[row][col] = "O"
                    return
                board[row][col] = None
    empty_cells = [(r, c) for r in range(BOARD_ROWS) for c in range(BOARD_COLS) if available_square(r, c)]
    if empty_cells:
        row, col = random.choice(empty_cells)
        mark_square(row, col, "O")

def show_score(player_score, computer_score):
    player_text = font.render(f"Player 1: {player_score}", True, WHITE)
    computer_text = font.render(f"{'Computer' if vs_computer else 'Player 2'}: {computer_score}", True, WHITE)
    screen.blit(player_text, (40, 50))
    screen.blit(computer_text, (40, 90))

def show_winner(text):
    winner_font = pygame.font.Font(None, 60)
    winner_text = winner_font.render(text, True, WHITE)
    bg_rect = pygame.Rect(WIDTH // 2 - winner_text.get_width() // 2 - 20,
                          HEIGHT // 2 - winner_text.get_height() // 2 - 10,
                          winner_text.get_width() + 40, winner_text.get_height() + 20)
    pygame.draw.rect(screen, WINNER_BG, bg_rect, border_radius=10)
    screen.blit(winner_text, (WIDTH // 2 - winner_text.get_width() // 2,
                              HEIGHT // 2 - winner_text.get_height() // 2))

def show_instructions():
    inst1 = font.render("Press P: Switch Mode", True, WHITE)
    inst2 = font.render("Press R: Restart", True, WHITE)
    screen.blit(inst1, (40, HEIGHT - 80))
    screen.blit(inst2, (40, HEIGHT - 50))

def draw_win_line():
    if win_line:
        pygame.draw.line(screen, BLACK, win_line[0], win_line[1], 8)

def restart():
    global board, win_line
    board = [[None] * BOARD_COLS for _ in range(BOARD_ROWS)]
    win_line = None
    draw_board()

# ---------- MAIN LOOP ----------
draw_board()
player_turn = True
game_over = False
player_score = 0
computer_score = 0
vs_computer = True
current_player = "X"

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        if event.type == pygame.MOUSEBUTTONDOWN and not game_over:
            mouseX, mouseY = event.pos
            if BOARD_OFFSET_X < mouseX < BOARD_OFFSET_X + BOARD_COLS * SQUARE_SIZE and \
               BOARD_OFFSET_Y < mouseY < BOARD_OFFSET_Y + BOARD_ROWS * SQUARE_SIZE:
                clicked_row = (mouseY - BOARD_OFFSET_Y) // SQUARE_SIZE
                clicked_col = (mouseX - BOARD_OFFSET_X) // SQUARE_SIZE
                if available_square(clicked_row, clicked_col):
                    mark_square(clicked_row, clicked_col, current_player)

                    if check_win(current_player):
                        if current_player == "X":
                            player_score += 1
                        else:
                            computer_score += 1
                        game_over = True
                    elif not is_board_full():
                        if vs_computer:
                            if current_player == "X":
                                current_player = "O"
                        else:
                            current_player = "O" if current_player == "X" else "X"

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_r:
                restart()
                player_turn = True
                game_over = False
                current_player = "X"
            if event.key == pygame.K_p:
                vs_computer = not vs_computer
                restart()
                player_score = 0
                computer_score = 0
                game_over = False
                current_player = "X"

    if vs_computer and current_player == "O" and not game_over:
        pygame.time.delay(400)
        computer_move()

        if check_win("O"):
            computer_score += 1
            game_over = True
        current_player = "X"

    draw_board()
    draw_figures()
    show_score(player_score, computer_score)
    show_instructions()
    if game_over:
        draw_win_line()
        if check_win("X"):
            show_winner("Player 1 Wins!")
        elif check_win("O"):
            show_winner("Computer Wins!" if vs_computer else "Player 2 Wins!")
        else:
            show_winner("Draw!")
    pygame.display.update()
